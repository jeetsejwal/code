

DDL
DML
Where
Operator
WIld card
Order by
Group by
Having
Case when 
Union 
Union all
Join 
Constraints

	
Procedure 
			TL SQL : Transactional SQL
			Variables
					@var datatype
					@var2 datatype

			condition 
					if condition
					begin
					

					end
					else
					begin


					end

			Loop:
				while condition			
				begin	


				end

			Temp table	
					#		: session specific
					##		: global / will be available unit db server / instance will not restart 

			Table variable
					delcare @tbl as table				:code block level / query level 
						(
							id int,
							name varchar
						)


						


View 			: is virtaul table or wrapper over the table 
			 - to hide and show data 
			 - view can be used as a physical table 
			 - we can also insert data in table using view (limition : in a table at a time)		
subquery		: query inside query 
			: 

---------------------------------

Q.
PRODUCT
PID PNAME  PRICE  SPRICE
1   IPHONE
2   DOVE
3   HP

TRANSACTION
TID  PID   TRAN_TYPE QTY  DATE
1    1        P       200
2    1        S		100
3   2		P	30
4   1		S	10
5   2		S	3




OUTPUT:
PID  PNAME   TOTAL_PURCHASE TOTAL_SALE  AVAILABLE_IN_STOCK       
1    IPHONE   200             40           60
2     DOVE    30              3              27

 select 
 
 pid,pname ,
 (select sum(qty) from TRANSACTIONS where TRAN_TYPE ='p' and TRANSACTIONS.pid = p.pid)  as total_p,
  (select sum(qty) from TRANSACTIONS where TRAN_TYPE ='s' and TRANSACTIONS.pid = p.pid)  as total_Sell,
 ( (select sum(qty) from TRANSACTIONS where TRAN_TYPE ='p' and TRANSACTIONS.pid = p.pid) -
  (select sum(qty) from TRANSACTIONS where TRAN_TYPE ='s' and TRANSACTIONS.pid = p.pid)) as avail_stock
 
  
 
 from PRODUCT as p
  
 ---------------------------------------------------------------------------------------------------------


create dATABASE hrms
use hrms
-------------------------------------------------------
create table admin_table
(
ad_id int primary key identity(1,1),
ad_name varchar(50),
ad_pass varchar(50) not null
)

insert into admin_table values('jai','tech')
select * from admin_table

alter proc adm
as
begin
insert into admin_table values('sanjay','techVision')
end
exec adm



create table employee
(
eid int identity(1,1),
name varchar(100),
email varchar(100),
country varchar(100),
gender char(1)
)


create table salary
(
eid int ,
basic int,
hra int
)




--create view to show emplyee details 



---
select * from v_emp 




select * from admin_table

--return 2nd highest value 
select top 1 * from 
					(select top 2 * from admin_table order by ad_id desc)  t
order by ad_id



--return 3rd highest value 
select top 1 * from 
					(select top 3 * from admin_table order by ad_id desc)  t
order by ad_id

--return 3 lowest value 
select top 1 * from 
					(select top 3 * from admin_table order by ad_id asc)  t
order by ad_id desc



--loop
declare @i as int
set @i =1
while @i<10
begin

		select @i 
		set @i = @i +1 

end




create table  #tb 
(
id int,
name varchar(100)
)

select* from #tb 

create table  ##tb 
(
id int,
name varchar(100)
)

select * from ##tb 



----table variable
declare @a as table
	(	
		id int,
		name varchar(100)
	)


select * from @a 



create proc  variable_test
as
begin

			select * into #temp from admin_table where ad_id >2

			select * into #x from admin_table where ad_id <2



			select * from #temp
			select * from #x 


end

execute variable_test
CREATE  table PRODUCT
(
pid int primary key identity(1,1),
pname varchar(50),
price int,
sprice int
)

insert into PRODUCT values('lenovo',42000,45000)
select * from PRODUCT

CREATE  table TRANSACTIONS
(
TID   int primary key identity(1,1),
pid int ,
TRAN_TYPE  int,
QTY   int,
dat date
)
alter table TRANSACTIONS
add   TRAN_TYPE varchar(50)
select * from PRODUCT

insert into TRANSACTIONS values(3,250,'','p')
select * from TRANSACTIONS

=========================================================================================================






























			 		